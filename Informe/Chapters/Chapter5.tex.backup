\lhead{\emph{Limitaciones}}

\chapter{Limitaciones}

La herramienta que se detalla en este informe presenta diversas limitaciones, que pueden clasificarse en dos grupos: aquellas provenientes de las aplicaciones que usa, en especial {\tt FlowDroid} y {\tt Epicc}; y aquellas limitaciones propias de la herramienta.
En el primer grupo, una limitación importante es la falta de solidez del análisis producida por las llamadas recursivas y el código nativo, ya que estas no son tratadas de manera eficaz por {\tt Epicc} ni por {\tt FlowDroid}. {\tt FlowDroid} analiza las llamadas que invocan a código nativo de la siguiente manera: si los datos de entrada estaban {\it contaminados} (forma por la cual {\tt Flowdroid} determina el flujo de la información) antes de la llamada, entonces se determina que todos los argumentos de llamada y cualquier valor de retorno están contaminados. Este manejo no es sólido; no analiza los flujos reales en el código nativo invocado, sino que procede de manera conservativa . Tampoco son consideradas las fugas de información que involucre multithread (hilos de ejecución).\par
Didfail solo sigue el flujo de la información si ésta es transmitida a través de Intents, por lo que dos aplicaciones pueden enviarse información de manera tal que el análisis no lo detecte utilizando, por ejemplo, campos estáticos compartidos como medio de comunicación. Además, Didfail también detecta posibles flujos de información, que son imposibles que sucedan en realidad.\par
En el segundo grupo de limitaciones, la definición de los niveles de seguridad es necesaria para poder utilizar de manera correcta la herramienta, y para lograr esto, el usuario debe tener conocimiento sobre relaciones de orden, configuración de entornos mediante el uso de archivos de configuración. Además, deberá conocer las variables asociadas a los recursos para poder asociarles los niveles de seguridad, esto último solo en los casos de que no se utilice la interfaz que provee la herramienta.\par
Las pruebas fueron realizadas utilizando aplicaciones que podemos denominar de "juguete", es decir, aplicaciones desarrolladas exclusivamente para probar esta herramienta. Es necesario realizar pruebas a mayor escala, utilizando aplicaciones de uso cotidiano, que pertenezcan al mundo real, para poder comprobar de manera mas certera el rendimiento y la exactitud de los resultados.\par